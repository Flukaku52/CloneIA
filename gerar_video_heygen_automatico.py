#!/usr/bin/env python3
"""
Script para gerar v√≠deo automaticamente no HeyGen via API
"""

import os
import sys
import json
import time
import requests
import logging
from pathlib import Path
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

# Configura logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class HeyGenVideoCreator:
    def __init__(self):
        self.api_key = os.getenv('HEYGEN_API_KEY')
        if not self.api_key:
            raise ValueError("HEYGEN_API_KEY n√£o encontrada no .env")
            
        self.api_base_url = "https://api.heygen.com/v2"
        self.headers = {
            "X-Api-Key": self.api_key,
            "Content-Type": "application/json"
        }
        
        # Configura√ß√µes espec√≠ficas fornecidas pelo usu√°rio
        self.avatar_id = "ad46ec4202394d9aa33bcf5974bac416"
        self.avatar_name = "Avatar Personalizado"
        self.voice_id = "25NR0sM9ehsgXaoknsxO"
        
        logging.info(f"Avatar configurado: {self.avatar_name} (ID: {self.avatar_id})")
        logging.info(f"Voice ID: {self.voice_id}")
    
    def upload_audio(self, audio_path):
        """Upload do √°udio para o HeyGen"""
        logging.info(f"Fazendo upload do √°udio: {audio_path}")
        
        # HeyGen v2 API usa upload direto no endpoint de cria√ß√£o de v√≠deo
        # Ent√£o vamos apenas retornar o caminho do arquivo para uso posterior
        return audio_path
    
    def create_video(self, audio_path):
        """Cria o v√≠deo com o √°udio local"""
        logging.info("Criando v√≠deo no HeyGen...")
        
        # Para a API v2, primeiro fazemos upload do √°udio
        with open(audio_path, 'rb') as audio_file:
            # Primeiro, cria o asset de √°udio
            files = {
                'file': (os.path.basename(audio_path), audio_file, 'audio/mpeg')
            }
            
            upload_response = requests.post(
                "https://upload.heygen.com/v1/asset",
                headers={"X-Api-Key": self.api_key},
                files=files
            )
            
            if upload_response.status_code != 200:
                logging.error(f"Erro ao fazer upload: {upload_response.status_code} - {upload_response.text}")
                return None
                
            upload_data = upload_response.json()
            audio_asset_id = upload_data.get('data', {}).get('id')
            
            if not audio_asset_id:
                logging.error("N√£o foi poss√≠vel obter o ID do asset de √°udio")
                return None
                
            logging.info(f"√Åudio enviado. Asset ID: {audio_asset_id}")
        
        # Agora cria o v√≠deo com o asset de √°udio
        payload = {
            "video_inputs": [{
                "character": {
                    "type": "avatar",
                    "avatar_id": self.avatar_id,
                    "avatar_style": "normal"
                },
                "voice": {
                    "type": "audio",
                    "audio_asset_id": audio_asset_id
                },
                "background": {
                    "type": "color",
                    "value": "#1a1a1a"
                }
            }],
            "dimension": {
                "width": 1080,
                "height": 1920
            },
            "aspect_ratio": "9:16",
            "test": False
        }
        
        create_url = f"{self.api_base_url}/video/generate"
        response = requests.post(create_url, headers=self.headers, json=payload)
        
        if response.status_code in [200, 201]:
            result = response.json()
            video_id = result.get('data', {}).get('video_id')
            logging.info(f"V√≠deo criado! ID: {video_id}")
            return video_id
        else:
            logging.error(f"Erro ao criar v√≠deo: {response.status_code} - {response.text}")
            return None
    
    def check_status(self, video_id):
        """Verifica o status do v√≠deo"""
        status_url = f"{self.api_base_url}/video_status.get?video_id={video_id}"
        response = requests.get(status_url, headers=self.headers)
        
        if response.status_code == 200:
            result = response.json()
            return result.get('data', {})
        return None
    
    def wait_for_video(self, video_id, max_wait=600):
        """Aguarda o v√≠deo ser processado"""
        logging.info("Aguardando processamento do v√≠deo...")
        start_time = time.time()
        
        while time.time() - start_time < max_wait:
            status_data = self.check_status(video_id)
            
            if status_data:
                status = status_data.get('status')
                
                if status == 'completed':
                    video_url = status_data.get('video_url')
                    logging.info(f"V√≠deo processado com sucesso!")
                    return video_url
                elif status == 'failed':
                    error = status_data.get('error', 'Erro desconhecido')
                    logging.error(f"Falha no processamento: {error}")
                    return None
                else:
                    logging.info(f"Status: {status} - Aguardando...")
            
            time.sleep(10)
        
        logging.error("Timeout esperando o v√≠deo")
        return None
    
    def download_video(self, video_url, output_path):
        """Baixa o v√≠deo gerado"""
        logging.info(f"Baixando v√≠deo...")
        
        response = requests.get(video_url, stream=True)
        
        if response.status_code == 200:
            with open(output_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            logging.info(f"V√≠deo salvo em: {output_path}")
            return True
        else:
            logging.error(f"Erro ao baixar v√≠deo: {response.status_code}")
            return False

def main():
    print("üé¨ GERANDO V√çDEO AUTOMATICAMENTE NO HEYGEN")
    print("=" * 60)
    
    # Caminhos
    project_root = Path(__file__).parent.resolve()
    audio_path = project_root / "output" / "audio" / "renato_connecticut_bitcoin_audio.mp3"
    
    if not audio_path.exists():
        print(f"‚ùå Erro: √Åudio n√£o encontrado em {audio_path}")
        return 1
    
    try:
        # Inicializa o criador de v√≠deos
        creator = HeyGenVideoCreator()
        
        print(f"üìÅ √Åudio: {audio_path}")
        print(f"ü§ñ Avatar: {creator.avatar_name} (ID: {creator.avatar_id})")
        print("üîÑ Iniciando processo...")
        
        # 1. Preparando √°udio
        print("\n[1/4] Preparando √°udio...")
        
        # 2. Cria o v√≠deo (upload √© feito dentro do m√©todo)
        print("\n[2/4] Criando v√≠deo com upload do √°udio...")
        video_id = creator.create_video(str(audio_path))
        
        if not video_id:
            print("‚ùå Erro ao criar v√≠deo")
            return 1
        
        # 3. Aguarda processamento
        print(f"\n[3/4] Processando v√≠deo (ID: {video_id})...")
        video_url = creator.wait_for_video(video_id)
        
        if not video_url:
            print("‚ùå Erro no processamento do v√≠deo")
            return 1
        
        # 4. Baixa o v√≠deo
        print("\n[4/4] Baixando v√≠deo...")
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        output_path = project_root / "output" / "videos" / f"renato_connecticut_{timestamp}.mp4"
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        if creator.download_video(video_url, str(output_path)):
            print(f"\n‚úÖ SUCESSO! V√≠deo gerado: {output_path}")
            print(f"üîó URL do v√≠deo: {video_url}")
        else:
            print("‚ùå Erro ao baixar v√≠deo")
            print(f"üí° Baixe manualmente de: {video_url}")
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        logging.exception("Erro detalhado:")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())