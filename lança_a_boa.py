#!/usr/bin/env python3
"""
üöÄ LAN√áA A BOA - Varredura inteligente de not√≠cias cripto
Comando: python lan√ßa_a_boa.py
"""
import os
import json
from datetime import datetime, timedelta
from ia_system.core.news_collector import NewsCollector

def main():
    print("üöÄ LAN√áA A BOA - VARREDURA DE NOT√çCIAS")
    print("=" * 60)
    
    # Verificar timestamp da √∫ltima varredura
    timestamp_file = "ia_system/cache/ultima_varredura.json"
    os.makedirs(os.path.dirname(timestamp_file), exist_ok=True)
    
    agora = datetime.now()
    
    if os.path.exists(timestamp_file):
        with open(timestamp_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
            ultima_varredura = datetime.fromisoformat(data['ultima_varredura'])
            tempo_desde = agora - ultima_varredura
            
        print(f"‚è∞ √öltima varredura: {ultima_varredura.strftime('%d/%m/%Y %H:%M')}")
        print(f"üïí Tempo decorrido: {tempo_desde}")
    else:
        print("üÜï Primeira varredura!")
        ultima_varredura = agora - timedelta(hours=24)  # Buscar √∫ltimas 24h na primeira vez
    
    print(f"üîç Buscando not√≠cias desde {ultima_varredura.strftime('%d/%m/%Y %H:%M')}...")
    print("-" * 60)
    
    # Coletar not√≠cias
    collector = NewsCollector()
    noticias = collector.obter_noticias_para_roteiro()
    
    if not noticias:
        print("üì≠ Nenhuma not√≠cia nova encontrada")
        print("üí° Tente novamente em algumas horas!")
        return
    
    # Filtrar por data (s√≥ not√≠cias desde √∫ltima varredura)
    noticias_novas = []
    for noticia in noticias:
        if noticia.data_publicacao > ultima_varredura:
            noticias_novas.append(noticia)
    
    if not noticias_novas:
        print("üì∞ Todas as not√≠cias j√° foram analisadas na √∫ltima varredura")
        print("üí° Aguarde novas not√≠cias surgirem!")
        return
    
    print(f"üéØ ENCONTRADAS {len(noticias_novas)} NOT√çCIAS NOVAS:")
    print("=" * 60)
    
    # Classificar por prioridade
    alta_prioridade = [n for n in noticias_novas if n.relevancia_score >= 60]
    media_prioridade = [n for n in noticias_novas if 40 <= n.relevancia_score < 60]
    baixa_prioridade = [n for n in noticias_novas if n.relevancia_score < 40]
    
    # Mostrar not√≠cias organizadas por prioridade
    if alta_prioridade:
        print(f"\nüî• ALTA PRIORIDADE ({len(alta_prioridade)} not√≠cias):")
        print("-" * 40)
        for i, noticia in enumerate(alta_prioridade, 1):
            print(f"\n{i}. üî• {noticia.titulo}")
            print(f"   üì∞ {noticia.fonte}")
            print(f"   üè∑Ô∏è {', '.join(noticia.categorias)}")
            print(f"   üìä Score: {noticia.relevancia_score}")
            print(f"   üìÖ {noticia.data_publicacao.strftime('%d/%m %H:%M')}")
            preview = noticia.conteudo[:150] + "..." if len(noticia.conteudo) > 150 else noticia.conteudo
            print(f"   üìù {preview}")
    
    if media_prioridade:
        print(f"\nüìà M√âDIA PRIORIDADE ({len(media_prioridade)} not√≠cias):")
        print("-" * 40)
        for i, noticia in enumerate(media_prioridade, 1):
            print(f"\n{i}. üìà {noticia.titulo}")
            print(f"   üì∞ {noticia.fonte} | üìä {noticia.relevancia_score} | üìÖ {noticia.data_publicacao.strftime('%d/%m %H:%M')}")
            preview = noticia.conteudo[:100] + "..." if len(noticia.conteudo) > 100 else noticia.conteudo
            print(f"   üìù {preview}")
    
    if baixa_prioridade:
        print(f"\nüìä BAIXA PRIORIDADE ({len(baixa_prioridade)} not√≠cias):")
        print("-" * 40)
        for i, noticia in enumerate(baixa_prioridade, 1):
            print(f"{i}. üìä {noticia.titulo[:60]}...")
            print(f"   üì∞ {noticia.fonte} | üìä {noticia.relevancia_score}")
    
    # An√°lise r√°pida
    print(f"\n" + "=" * 60)
    print("üìä AN√ÅLISE R√ÅPIDA:")
    
    # Contagem por categoria
    categorias = {}
    for noticia in noticias_novas:
        for cat in noticia.categorias:
            categorias[cat] = categorias.get(cat, 0) + 1
    
    if categorias:
        print("üè∑Ô∏è Por categoria:")
        for categoria, count in sorted(categorias.items(), key=lambda x: x[1], reverse=True):
            print(f"   ‚Ä¢ {categoria}: {count}")
    
    # Contagem por fonte
    fontes = {}
    for noticia in noticias_novas:
        fonte_limpa = noticia.fonte.split(' - ')[0]  # Remove detalhes ap√≥s -
        fontes[fonte_limpa] = fontes.get(fonte_limpa, 0) + 1
    
    if fontes:
        print("üì∞ Por fonte:")
        for fonte, count in sorted(fontes.items(), key=lambda x: x[1], reverse=True):
            print(f"   ‚Ä¢ {fonte}: {count}")
    
    # Recomenda√ß√µes
    print(f"\nüí° RECOMENDA√á√ïES:")
    if len(alta_prioridade) >= 2:
        print("‚úÖ Tem material suficiente para um reel completo!")
        print("üé¨ Recomendo usar as not√≠cias de ALTA PRIORIDADE")
    elif len(alta_prioridade) + len(media_prioridade) >= 2:
        print("‚ö†Ô∏è Combine ALTA + M√âDIA prioridade para um reel")
    else:
        print("‚è≥ Aguarde mais not√≠cias ou use uma not√≠cia + an√°lise mais aprofundada")
    
    print(f"\nüéØ PR√ìXIMOS PASSOS:")
    print("‚Ä¢ Para gerar roteiro completo: python ia_system/core/script_generator.py")
    print("‚Ä¢ Para excluir not√≠cias: python excluir_noticias.py")
    print("‚Ä¢ Para monitorar cont√≠nuo: python monitorar.py")
    
    # Salvar timestamp desta varredura
    with open(timestamp_file, 'w', encoding='utf-8') as f:
        json.dump({
            'ultima_varredura': agora.isoformat(),
            'noticias_encontradas': len(noticias_novas),
            'alta_prioridade': len(alta_prioridade),
            'media_prioridade': len(media_prioridade)
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚è∞ Timestamp salvo para pr√≥xima varredura: {agora.strftime('%d/%m/%Y %H:%M')}")

if __name__ == "__main__":
    main()