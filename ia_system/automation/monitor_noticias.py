#!/usr/bin/env python3
"""
Monitor autom√°tico de not√≠cias para detec√ß√£o de conte√∫do relevante.
"""
import os
import sys
import json
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any

# Adicionar diret√≥rio pai ao path
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.join(current_dir, '..', '..')
sys.path.insert(0, project_root)

from ia_system.core.news_collector import NewsCollector
from ia_system.core.twitter_collector import TwitterCollector
from ia_system.core.notificador import Notificador

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class NewsMonitor:
    """
    Monitor autom√°tico de not√≠cias cripto.
    """
    
    def __init__(self):
        """Inicializa o monitor de not√≠cias."""
        self.news_collector = NewsCollector()
        self.twitter_collector = TwitterCollector()
        self.notificador = Notificador()
        
        # Arquivo para tracking de not√≠cias j√° vistas
        self.seen_file = os.path.join(os.path.dirname(__file__), "..", "cache", "seen_news.json")
        os.makedirs(os.path.dirname(self.seen_file), exist_ok=True)
        
        # Carregar not√≠cias j√° vistas
        self.seen_news = self._load_seen_news()
        
        # Palavras-chave de alta prioridade para alertas
        self.high_priority_keywords = [
            'urgente', 'breaking', 'oficial', 'aprovado', 'regulamenta√ß√£o',
            'banco central', 'sec', 'brasil', 'drex', 'cbdc',
            'microstrategy', 'tesla', 'blackrock', 'etf aprovado',
            'hack', 'fal√™ncia', 'proibi√ß√£o', 'libera√ß√£o'
        ]
    
    def _load_seen_news(self) -> List[str]:
        """Carrega IDs de not√≠cias j√° vistas."""
        if os.path.exists(self.seen_file):
            try:
                with open(self.seen_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return data.get('seen_ids', [])
            except:
                return []
        return []
    
    def _save_seen_news(self):
        """Salva IDs de not√≠cias j√° vistas."""
        try:
            data = {
                'seen_ids': self.seen_news[-1000:],  # Manter apenas √∫ltimas 1000
                'last_update': datetime.now().isoformat()
            }
            with open(self.seen_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"Erro ao salvar seen_news: {e}")
    
    def _is_high_priority(self, titulo: str, conteudo: str) -> bool:
        """Verifica se √© not√≠cia de alta prioridade."""
        texto_completo = f"{titulo} {conteudo}".lower()
        
        for keyword in self.high_priority_keywords:
            if keyword in texto_completo:
                return True
        
        return False
    
    def _generate_alert(self, noticias_novas: List[Any], high_priority: List[Any]):
        """Gera alerta sobre not√≠cias novas."""
        print("\n" + "="*60)
        print(f"üö® ALERTA DE NOT√çCIAS - {datetime.now().strftime('%d/%m/%Y %H:%M')}")
        print("="*60)
        
        if high_priority:
            print(f"\n‚ö° ALTA PRIORIDADE ({len(high_priority)} not√≠cias):")
            print("-"*40)
            for noticia in high_priority:
                print(f"‚Ä¢ {noticia.titulo}")
                print(f"  üì∞ Fonte: {noticia.fonte}")
                print(f"  üè∑Ô∏è Categoria: {', '.join(noticia.categorias)}")
                print(f"  üìä Score: {noticia.relevancia_score}")
                print()
        
        if noticias_novas:
            print(f"\nüì∞ NOVAS NOT√çCIAS ({len(noticias_novas)} encontradas):")
            print("-"*40)
            for noticia in noticias_novas[:5]:  # Mostrar at√© 5
                print(f"‚Ä¢ {noticia.titulo[:80]}...")
                print(f"  üì∞ {noticia.fonte} | üè∑Ô∏è {', '.join(noticia.categorias)}")
        
        print("\nüí° Dica: Execute o pipeline para gerar roteiro com essas not√≠cias!")
        print("="*60 + "\n")
    
    def monitorar_uma_vez(self) -> Dict[str, Any]:
        """Executa uma checagem de not√≠cias."""
        logger.info("üîç Verificando not√≠cias...")
        
        # Coletar not√≠cias
        todas_noticias = self.news_collector.obter_noticias_para_roteiro()
        
        # Filtrar not√≠cias novas
        noticias_novas = []
        high_priority = []
        
        for noticia in todas_noticias:
            # Criar ID √∫nico para a not√≠cia
            noticia_id = f"{noticia.fonte}_{noticia.titulo[:50]}_{noticia.data_publicacao.date()}"
            
            if noticia_id not in self.seen_news:
                noticias_novas.append(noticia)
                self.seen_news.append(noticia_id)
                
                # Verificar se √© alta prioridade
                if self._is_high_priority(noticia.titulo, noticia.conteudo):
                    high_priority.append(noticia)
        
        # Salvar not√≠cias vistas
        self._save_seen_news()
        
        # Resultado
        resultado = {
            'timestamp': datetime.now().isoformat(),
            'total_noticias': len(todas_noticias),
            'noticias_novas': len(noticias_novas),
            'alta_prioridade': len(high_priority),
            'fontes': list(set(n.fonte for n in todas_noticias))
        }
        
        # Gerar alerta se houver not√≠cias novas
        if noticias_novas:
            self._generate_alert(noticias_novas, high_priority)
            
            # Enviar notifica√ß√µes
            if high_priority:
                # Notifica√ß√£o de alta prioridade
                titulo = f"CRIPTO ALERTA: {len(high_priority)} not√≠cias urgentes!"
                mensagem = f"Detectadas {len(noticias_novas)} not√≠cias novas, {len(high_priority)} de alta prioridade"
                
                self.notificador.notificar_completo(
                    titulo=titulo,
                    mensagem=mensagem,
                    prioridade="alta",
                    detalhes={
                        "noticias": [
                            {
                                "titulo": n.titulo,
                                "fonte": n.fonte,
                                "categoria": ", ".join(n.categorias),
                                "score": n.relevancia_score
                            } for n in high_priority
                        ]
                    }
                )
            elif len(noticias_novas) >= 3:
                # Notifica√ß√£o normal para muitas not√≠cias
                titulo = f"Novas not√≠cias cripto detectadas"
                mensagem = f"Encontradas {len(noticias_novas)} not√≠cias novas verificadas"
                
                self.notificador.notificar_completo(
                    titulo=titulo,
                    mensagem=mensagem,
                    prioridade="normal",
                    detalhes={
                        "total": len(noticias_novas),
                        "fontes": resultado['fontes']
                    }
                )
        else:
            logger.info("‚úÖ Nenhuma not√≠cia nova encontrada")
        
        return resultado
    
    def monitorar_continuo(self, intervalo_minutos: int = 15):
        """
        Monitora continuamente as not√≠cias.
        
        Args:
            intervalo_minutos: Intervalo entre verifica√ß√µes
        """
        logger.info(f"üöÄ Iniciando monitoramento cont√≠nuo (intervalo: {intervalo_minutos} min)")
        logger.info("Pressione Ctrl+C para parar\n")
        
        try:
            while True:
                # Executar checagem
                resultado = self.monitorar_uma_vez()
                
                # Log resumido
                logger.info(
                    f"üìä Resumo: {resultado['total_noticias']} not√≠cias, "
                    f"{resultado['noticias_novas']} novas, "
                    f"{resultado['alta_prioridade']} priorit√°rias"
                )
                
                # Aguardar pr√≥ximo ciclo
                logger.info(f"‚è∞ Pr√≥xima verifica√ß√£o em {intervalo_minutos} minutos...")
                time.sleep(intervalo_minutos * 60)
                
        except KeyboardInterrupt:
            logger.info("\nüëã Monitoramento interrompido pelo usu√°rio")
        except Exception as e:
            logger.error(f"‚ùå Erro no monitoramento: {e}")


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Monitor de not√≠cias cripto")
    parser.add_argument(
        "--continuo", 
        action="store_true", 
        help="Executar monitoramento cont√≠nuo"
    )
    parser.add_argument(
        "--intervalo", 
        type=int, 
        default=15,
        help="Intervalo em minutos para monitoramento cont√≠nuo (padr√£o: 15)"
    )
    
    args = parser.parse_args()
    
    monitor = NewsMonitor()
    
    if args.continuo:
        monitor.monitorar_continuo(args.intervalo)
    else:
        monitor.monitorar_uma_vez()