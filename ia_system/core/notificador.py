#!/usr/bin/env python3
"""
Sistema de notifica√ß√µes para alertas de not√≠cias.
"""
import os
import json
import subprocess
import platform
from datetime import datetime
from typing import List, Optional
import logging

logger = logging.getLogger(__name__)

class Notificador:
    """
    Sistema de notifica√ß√µes multiplataforma.
    """
    
    def __init__(self):
        """Inicializa o notificador."""
        self.sistema = platform.system()
        self.som_habilitado = True
        
        # Arquivo de configura√ß√£o de notifica√ß√µes
        self.config_file = os.path.join(os.path.dirname(__file__), "..", "config", "notificacoes.json")
        self.config = self._carregar_config()
    
    def _carregar_config(self) -> dict:
        """Carrega configura√ß√µes de notifica√ß√£o."""
        config_padrao = {
            "metodos_ativos": ["desktop", "som", "arquivo"],
            "webhook_discord": "",
            "webhook_telegram": "",
            "email": "",
            "som_arquivo": ""
        }
        
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r') as f:
                    return json.load(f)
            except:
                pass
        
        return config_padrao
    
    def notificar_desktop(self, titulo: str, mensagem: str):
        """
        Envia notifica√ß√£o desktop nativa.
        
        Args:
            titulo: T√≠tulo da notifica√ß√£o
            mensagem: Mensagem da notifica√ß√£o
        """
        try:
            if self.sistema == "Darwin":  # macOS
                # Usar osascript para notifica√ß√£o nativa
                script = f'display notification "{mensagem}" with title "{titulo}" sound name "Submarine"'
                subprocess.run(["osascript", "-e", script])
                
            elif self.sistema == "Windows":
                # Windows 10/11 toast notification
                try:
                    from win10toast import ToastNotifier
                    toaster = ToastNotifier()
                    toaster.show_toast(titulo, mensagem, duration=10)
                except ImportError:
                    # Fallback para Windows
                    subprocess.run([
                        "msg", "*", f"{titulo}\n{mensagem}"
                    ])
                    
            else:  # Linux
                # Usar notify-send
                subprocess.run([
                    "notify-send", titulo, mensagem,
                    "-i", "dialog-information",
                    "-u", "critical"
                ])
                
            logger.info(f"‚úÖ Notifica√ß√£o desktop enviada: {titulo}")
            
        except Exception as e:
            logger.error(f"Erro ao enviar notifica√ß√£o desktop: {e}")
    
    def tocar_som(self):
        """Toca som de alerta."""
        if not self.som_habilitado:
            return
            
        try:
            if self.sistema == "Darwin":  # macOS
                # Som do sistema
                subprocess.run(["afplay", "/System/Library/Sounds/Submarine.aiff"])
            elif self.sistema == "Windows":
                # Beep do Windows
                import winsound
                winsound.MessageBeep(winsound.MB_ICONEXCLAMATION)
            else:  # Linux
                # Beep gen√©rico
                subprocess.run(["paplay", "/usr/share/sounds/freedesktop/stereo/message.oga"])
                
        except Exception as e:
            logger.error(f"Erro ao tocar som: {e}")
    
    def salvar_notificacao_arquivo(self, titulo: str, mensagem: str, detalhes: dict = None):
        """
        Salva notifica√ß√£o em arquivo para consulta posterior.
        
        Args:
            titulo: T√≠tulo da notifica√ß√£o
            mensagem: Mensagem principal
            detalhes: Detalhes adicionais
        """
        try:
            notif_dir = os.path.join(os.path.dirname(__file__), "..", "..", "output", "notificacoes")
            os.makedirs(notif_dir, exist_ok=True)
            
            notif_file = os.path.join(notif_dir, f"alertas_{datetime.now().strftime('%Y%m%d')}.txt")
            
            with open(notif_file, 'a', encoding='utf-8') as f:
                f.write(f"\n{'='*60}\n")
                f.write(f"üö® {datetime.now().strftime('%H:%M:%S')} - {titulo}\n")
                f.write(f"{'='*60}\n")
                f.write(f"{mensagem}\n")
                
                if detalhes:
                    f.write(f"\nDETALHES:\n")
                    for key, value in detalhes.items():
                        f.write(f"‚Ä¢ {key}: {value}\n")
                
                f.write(f"\n")
            
            logger.info(f"üìù Notifica√ß√£o salva em: {notif_file}")
            
        except Exception as e:
            logger.error(f"Erro ao salvar notifica√ß√£o: {e}")
    
    def enviar_webhook_discord(self, titulo: str, mensagem: str, noticias: List = None):
        """
        Envia notifica√ß√£o via webhook do Discord.
        
        Args:
            titulo: T√≠tulo
            mensagem: Mensagem
            noticias: Lista de not√≠cias
        """
        webhook_url = self.config.get("webhook_discord")
        if not webhook_url:
            return
            
        try:
            import requests
            
            # Formatar mensagem para Discord
            embed = {
                "title": f"üö® {titulo}",
                "description": mensagem,
                "color": 16711680,  # Vermelho
                "timestamp": datetime.utcnow().isoformat(),
                "fields": []
            }
            
            if noticias:
                for i, noticia in enumerate(noticias[:5]):
                    embed["fields"].append({
                        "name": f"üì∞ Not√≠cia {i+1}",
                        "value": f"{noticia['titulo']}\n*Fonte: {noticia['fonte']}*",
                        "inline": False
                    })
            
            data = {"embeds": [embed]}
            
            response = requests.post(webhook_url, json=data)
            if response.status_code == 204:
                logger.info("‚úÖ Notifica√ß√£o enviada para Discord")
            
        except Exception as e:
            logger.error(f"Erro ao enviar para Discord: {e}")
    
    def notificar_completo(self, titulo: str, mensagem: str, prioridade: str = "normal", detalhes: dict = None):
        """
        Envia notifica√ß√£o usando todos os m√©todos configurados.
        
        Args:
            titulo: T√≠tulo da notifica√ß√£o
            mensagem: Mensagem principal
            prioridade: "alta", "normal" ou "baixa"
            detalhes: Informa√ß√µes adicionais
        """
        metodos = self.config.get("metodos_ativos", ["desktop", "som", "arquivo"])
        
        # Se alta prioridade, for√ßar todos os m√©todos
        if prioridade == "alta":
            if "desktop" in metodos:
                self.notificar_desktop(f"‚ö° {titulo}", mensagem)
            if "som" in metodos:
                self.tocar_som()
        
        # Sempre salvar em arquivo
        if "arquivo" in metodos:
            self.salvar_notificacao_arquivo(titulo, mensagem, detalhes)
        
        # Enviar para Discord se configurado
        if "discord" in metodos and detalhes and "noticias" in detalhes:
            self.enviar_webhook_discord(titulo, mensagem, detalhes["noticias"])
    
    def configurar_webhook_discord(self, webhook_url: str):
        """Configura webhook do Discord."""
        self.config["webhook_discord"] = webhook_url
        self._salvar_config()
        logger.info("‚úÖ Webhook Discord configurado")
    
    def _salvar_config(self):
        """Salva configura√ß√µes."""
        os.makedirs(os.path.dirname(self.config_file), exist_ok=True)
        with open(self.config_file, 'w') as f:
            json.dump(self.config, f, indent=2)


if __name__ == "__main__":
    # Teste do notificador
    notificador = Notificador()
    
    print("üîî TESTE DE NOTIFICA√á√ïES")
    print("-" * 40)
    
    # Teste de notifica√ß√£o desktop
    notificador.notificar_desktop(
        "Nova not√≠cia cripto detectada!",
        "MicroStrategy compra mais 1.000 BTC"
    )
    
    # Teste de som
    notificador.tocar_som()
    
    # Teste de arquivo
    notificador.salvar_notificacao_arquivo(
        "ALERTA: Alta prioridade",
        "Banco Central anuncia nova fase do Drex",
        {
            "fonte": "Twitter - @bitdov",
            "categoria": "cbdc_drex",
            "score": 85
        }
    )
    
    print("\n‚úÖ Testes conclu√≠dos!")
    print("Verifique:")
    print("‚Ä¢ Notifica√ß√£o desktop apareceu")
    print("‚Ä¢ Som foi tocado")
    print("‚Ä¢ Arquivo salvo em output/notificacoes/")