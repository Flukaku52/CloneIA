#!/usr/bin/env python3
"""
Sistema de an√°lise e aprendizado de padr√µes de roteiros
"""

import json
import re
import os
from typing import Dict, List, Tuple
from datetime import datetime
from collections import Counter

class AnalisadorRoteiros:
    """Analisa roteiros para extrair padr√µes e estilo de escrita"""
    
    def __init__(self):
        self.padroes_extraidos = {
            "estrutura": {},
            "linguagem": {},
            "transicoes": [],
            "vocabulario": {},
            "estilos": {},
            "metadata": {}
        }
        
    def analisar_roteiro_atual(self):
        """Analisa o roteiro atual para extrair padr√µes"""
        
        # Roteiro atual (extra√≠do do generate_reel_correto.py)
        roteiro_atual = {
            "intro": {
                "text": "E a√≠ cambada! J√° t√¥ de volta por aqui e bora pras not√≠cias.",
                "funcao": "abertura_energica",
                "elementos": ["saudacao_caracteristica", "chamada_acao"]
            },
            "noticia1": {
                "text": """Empresas j√° t√™m mais de 3% do supply de BTC.

Seguinte: segundo o banco Standard Chartered, 61 empresas que t√™m a√ß√µes em bolsa j√° acumulam 3,2% de todo o Bitcoin que vai existir no mundo.

Entre elas est√£o MicroStrategy, Tesla e outras gigantes que t√£o comprando BTC pra colocar em caixa, como reserva de valor.

Em vez de s√≥ d√≥lar ou ouro, agora tem empresa diversificando com Bitcoin.
Isso refor√ßa que o BTC n√£o √© mais s√≥ papo de investidor de rede social ‚Äî t√° virando um ativo institucional.""",
                "funcao": "noticia_principal_bitcoin",
                "elementos": ["titulo_impactante", "fonte_credivel", "exemplos_concretos", "contextualizacao", "conclusao_mercado"]
            },
            "noticia2": {
                "text": """Blockchain pode modernizar abertura de empresas no Brasil.

Agora uma que pouca gente t√° falando:
Tem projeto de lei no Congresso propondo que a gente use blockchain nos registros de abertura de empresas.

A ideia √© garantir que os dados fiquem imut√°veis e rastre√°veis.
Menos chance de fraude, mais transpar√™ncia, e processos mais r√°pidos.

Hoje abrir empresa no Brasil ainda tem muita burocracia e sistema velho.
Se isso andar, seria um baita uso pr√°tico de blockchain ‚Äî al√©m do mercado cripto ‚Äî que realmente impacta a vida de quem empreende.""",
                "funcao": "noticia_brasil_blockchain",
                "elementos": ["titulo_claro", "gancho_exclusividade", "explicacao_tecnica", "beneficios_praticos", "critica_sistema_atual", "impacto_real"]
            },
            "noticia3": {
                "text": """Drex chega √† Amaz√¥nia.

Agora presta aten√ß√£o nessa aqui:
A Caixa Econ√¥mica Federal t√° testando o Drex, o real digital, em comunidades da Amaz√¥nia que n√£o t√™m nem internet.

A tecnologia permite que o morador fa√ßa pagamentos off-line, e quando o celular se conecta √† rede, tudo √© sincronizado.

√â um avan√ßo grande pra inclus√£o financeira ‚Äî levar pagamento digital pra quem hoje t√° fora do sistema.

Mas... a gente tamb√©m tem que olhar pro outro lado dessa moeda.
Diferente do dinheiro f√≠sico ‚Äî que voc√™ gasta sem deixar rastro ‚Äî o Drex √© uma moeda totalmente rastre√°vel e program√°vel.

Na pr√°tica, isso significa que o governo poderia, tecnicamente, monitorar e at√© controlar como voc√™ gasta seu dinheiro.

Ent√£o assim:
Tecnologia boa? Sim.
Mas liberdade financeira precisa estar no centro dessa conversa.
A gente tem que ficar muito atento pra isso n√£o virar ferramenta de controle.""",
                "funcao": "noticia_controversa_analise_dupla",
                "elementos": ["titulo_intrigante", "chamada_atencao", "explicacao_tecnica", "lado_positivo", "contraargumento", "analise_critica", "conclusao_equilibrada", "alerta_vigilancia"]
            },
            "encerramento": {
                "text": "Por hoje √© isso, cambada. Em breve t√¥ de volta, e sigo de olho.",
                "funcao": "fechamento_promessa_retorno",
                "elementos": ["encerramento_caracteristico", "promessa_continuidade", "reforco_vigilancia"]
            }
        }
        
        print("üîç ANALISANDO PADR√ïES DO ROTEIRO ATUAL")
        print("=" * 50)
        
        # Analisar estrutura
        self._analisar_estrutura(roteiro_atual)
        
        # Analisar linguagem
        self._analisar_linguagem(roteiro_atual)
        
        # Analisar transi√ß√µes
        self._analisar_transicoes(roteiro_atual)
        
        # Analisar vocabul√°rio
        self._analisar_vocabulario(roteiro_atual)
        
        # Analisar estilo narrativo
        self._analisar_estilo(roteiro_atual)
        
        # Salvar padr√µes
        self._salvar_padroes()
        
        return self.padroes_extraidos
    
    def _analisar_estrutura(self, roteiro: Dict):
        """Analisa a estrutura do roteiro"""
        
        estrutura = {
            "total_segmentos": len(roteiro),
            "ordem_segmentos": list(roteiro.keys()),
            "funcoes_por_segmento": {k: v["funcao"] for k, v in roteiro.items()},
            "tamanho_medio_segmentos": {},
            "proporcao_conteudo": {}
        }
        
        # Calcular tamanhos
        for segmento, dados in roteiro.items():
            texto = dados["text"]
            estrutura["tamanho_medio_segmentos"][segmento] = {
                "caracteres": len(texto),
                "palavras": len(texto.split()),
                "linhas": len(texto.split('\n'))
            }
        
        # Propor√ß√µes
        total_chars = sum(len(v["text"]) for v in roteiro.values())
        for segmento, dados in roteiro.items():
            chars = len(dados["text"])
            estrutura["proporcao_conteudo"][segmento] = round(chars / total_chars * 100, 1)
        
        self.padroes_extraidos["estrutura"] = estrutura
        
        print("üìä Estrutura identificada:")
        print(f"  ‚Ä¢ {len(roteiro)} segmentos")
        print(f"  ‚Ä¢ Propor√ß√µes: {estrutura['proporcao_conteudo']}")
    
    def _analisar_linguagem(self, roteiro: Dict):
        """Analisa padr√µes de linguagem"""
        
        linguagem = {
            "tom": "informal_brasileiro",
            "pessoa_verbal": "primeira_pessoa_plural", # "a gente", "t√¥"
            "expressoes_caracteristicas": [],
            "conectores_frequentes": [],
            "estruturas_frase": [],
            "marcadores_discursivos": []
        }
        
        # Extrair texto completo
        texto_completo = " ".join([v["text"] for v in roteiro.values()])
        
        # Express√µes caracter√≠sticas encontradas
        expressoes = [
            "E a√≠ cambada", "cambada", "Seguinte:", "Agora", "presta aten√ß√£o", 
            "pouca gente t√° falando", "a gente", "t√¥", "bora", "baita",
            "Ent√£o assim:", "Por hoje √© isso"
        ]
        
        linguagem["expressoes_caracteristicas"] = [
            expr for expr in expressoes if expr.lower() in texto_completo.lower()
        ]
        
        # Conectores
        conectores = [
            "Seguinte:", "Agora", "Mas...", "Na pr√°tica", "Ent√£o assim:",
            "Se isso andar", "Entre elas", "Em vez de", "Diferente do"
        ]
        
        linguagem["conectores_frequentes"] = [
            conector for conector in conectores if conector in texto_completo
        ]
        
        # Marcadores discursivos
        marcadores = [
            "segundo o", "presta aten√ß√£o", "a gente tamb√©m tem que",
            "tecnicamente", "realmente impacta", "ficar muito atento"
        ]
        
        linguagem["marcadores_discursivos"] = [
            marcador for marcador in marcadores if marcador.lower() in texto_completo.lower()
        ]
        
        self.padroes_extraidos["linguagem"] = linguagem
        
        print("üó£Ô∏è Linguagem identificada:")
        print(f"  ‚Ä¢ Tom: {linguagem['tom']}")
        print(f"  ‚Ä¢ Express√µes caracter√≠sticas: {len(linguagem['expressoes_caracteristicas'])}")
    
    def _analisar_transicoes(self, roteiro: Dict):
        """Analisa padr√µes de transi√ß√£o entre segmentos"""
        
        transicoes = []
        segmentos = list(roteiro.keys())
        
        # Padr√µes identificados
        padroes_transicao = {
            "intro_para_noticia": ["bora pras not√≠cias", "vamos √†s not√≠cias"],
            "entre_noticias": ["Agora", "Seguinte:", "Agora presta aten√ß√£o"],
            "para_encerramento": ["Por hoje √© isso", "√â isso a√≠"]
        }
        
        # Identificar transi√ß√µes no roteiro atual
        if "intro" in roteiro and "noticia1" in roteiro:
            if "bora pras not√≠cias" in roteiro["intro"]["text"]:
                transicoes.append({
                    "de": "intro",
                    "para": "noticia1", 
                    "mecanismo": "bora pras not√≠cias",
                    "tipo": "chamada_energica"
                })
        
        # Entre not√≠cias
        noticias = [k for k in segmentos if k.startswith("noticia")]
        for i in range(len(noticias) - 1):
            atual = noticias[i]
            proxima = noticias[i + 1]
            
            # Verificar se pr√≥xima not√≠cia come√ßa com marcador
            texto_proxima = roteiro[proxima]["text"]
            if texto_proxima.startswith("Agora"):
                transicoes.append({
                    "de": atual,
                    "para": proxima,
                    "mecanismo": "Agora",
                    "tipo": "introducao_nova_perspectiva"
                })
        
        self.padroes_extraidos["transicoes"] = transicoes
        
        print("üîÑ Transi√ß√µes identificadas:")
        print(f"  ‚Ä¢ {len(transicoes)} padr√µes de transi√ß√£o")
    
    def _analisar_vocabulario(self, roteiro: Dict):
        """Analisa vocabul√°rio espec√≠fico"""
        
        # Extrair palavras-chave por categoria
        vocabulario = {
            "termos_tecnicos": {
                "crypto": ["Bitcoin", "BTC", "blockchain", "Drex", "cripto", "supply"],
                "financeiro": ["reserva de valor", "ativo institucional", "diversificando", "inclus√£o financeira"],
                "tecnologia": ["off-line", "sincronizado", "rastre√°vel", "program√°vel", "imut√°veis"]
            },
            "expressoes_brasil": [
                "no Brasil", "brasileiro", "Congresso", "Caixa Econ√¥mica Federal", 
                "Amaz√¥nia", "burocracia", "sistema velho"
            ],
            "linguagem_coloquial": [
                "cambada", "t√¥", "bora", "baita", "galera", "pouca gente",
                "a gente", "papo de"
            ],
            "conectores_analise": [
                "Na pr√°tica", "Ent√£o assim", "Mas", "Diferente do",
                "Em vez de", "segundo o", "tecnicamente"
            ]
        }
        
        self.padroes_extraidos["vocabulario"] = vocabulario
        
        print("üìö Vocabul√°rio identificado:")
        print(f"  ‚Ä¢ Termos t√©cnicos: {len(vocabulario['termos_tecnicos']['crypto']) + len(vocabulario['termos_tecnicos']['financeiro'])}")
        print(f"  ‚Ä¢ Express√µes BR: {len(vocabulario['expressoes_brasil'])}")
    
    def _analisar_estilo(self, roteiro: Dict):
        """Analisa estilo narrativo"""
        
        estilo = {
            "abordagem_noticias": {
                "estrutura_padrao": [
                    "titulo_impactante",
                    "fonte_ou_contexto", 
                    "explicacao_detalhada",
                    "implicacoes_praticas",
                    "opiniao_pessoal"
                ],
                "tecnica_engagement": [
                    "dados_numericos_especificos", # 3,2%, 61 empresas
                    "exemplos_conhecidos", # MicroStrategy, Tesla
                    "contrapontos_equilibrados", # lado bom vs. riscos
                    "alertas_vigilancia" # "ficar atento"
                ]
            },
            "personalidade": {
                "tom_geral": "informativo_descontraido", 
                "posicionamento": "critico_equilibrado",
                "relacionamento_audiencia": "proxima_coloquial",
                "nivel_tecnico": "acessivel_com_profundidade"
            },
            "padroes_narrativos": {
                "uso_dados": "sempre_com_fonte",
                "exemplos": "empresas_conhecidas_e_casos_brasileiros", 
                "conclusoes": "provocativas_mas_equilibradas",
                "call_to_action": "impl√≠cito_vigilancia_critica"
            }
        }
        
        self.padroes_extraidos["estilos"] = estilo
        
        print("üé≠ Estilo identificado:")
        print(f"  ‚Ä¢ Tom: {estilo['personalidade']['tom_geral']}")
        print(f"  ‚Ä¢ Posicionamento: {estilo['personalidade']['posicionamento']}")
    
    def _salvar_padroes(self):
        """Salva padr√µes extra√≠dos para uso futuro"""
        
        # Adicionar metadata
        self.padroes_extraidos["metadata"] = {
            "versao": "1.0",
            "data_analise": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "roteiro_analisado": "reel_cripto_empresas_drex_junho_2025",
            "total_segmentos_analisados": len(self.padroes_extraidos["estrutura"]["ordem_segmentos"]),
            "objetivo": "aprender_padroes_para_geracao_automatica"
        }
        
        # Criar diret√≥rio se n√£o existir
        os.makedirs("ml_training/padroes_aprendidos", exist_ok=True)
        
        # Salvar arquivo JSON
        arquivo_padroes = "ml_training/padroes_aprendidos/padroes_roteiro_v1.json"
        with open(arquivo_padroes, 'w', encoding='utf-8') as f:
            json.dump(self.padroes_extraidos, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ Padr√µes salvos em: {arquivo_padroes}")
        
        # Criar arquivo de resumo leg√≠vel
        self._criar_resumo_padroes()
    
    def _criar_resumo_padroes(self):
        """Cria resumo leg√≠vel dos padr√µes"""
        
        resumo = f"""
# PADR√ïES APRENDIDOS DO ROTEIRO
An√°lise realizada em: {self.padroes_extraidos['metadata']['data_analise']}

## ESTRUTURA DO ROTEIRO
- **Total de segmentos:** {self.padroes_extraidos['estrutura']['total_segmentos']}
- **Ordem:** {' ‚Üí '.join(self.padroes_extraidos['estrutura']['ordem_segmentos'])}
- **Propor√ß√µes de conte√∫do:** {self.padroes_extraidos['estrutura']['proporcao_conteudo']}

## LINGUAGEM E TOM
- **Tom geral:** {self.padroes_extraidos['estilos']['personalidade']['tom_geral']}
- **Express√µes caracter√≠sticas:** {', '.join(self.padroes_extraidos['linguagem']['expressoes_caracteristicas'][:5])}
- **Conectores frequentes:** {', '.join(self.padroes_extraidos['linguagem']['conectores_frequentes'][:5])}

## PADR√ïES NARRATIVOS
- **Abordagem:** Sempre com fonte cred√≠vel + exemplos concretos + an√°lise cr√≠tica
- **Estrutura not√≠cia:** T√≠tulo ‚Üí Contexto ‚Üí Explica√ß√£o ‚Üí Implica√ß√µes ‚Üí Opini√£o
- **Estilo de conclus√£o:** Equilibrado mas provocativo, incentiva pensamento cr√≠tico

## VOCABUL√ÅRIO T√âCNICO
- **Crypto:** {', '.join(self.padroes_extraidos['vocabulario']['termos_tecnicos']['crypto'])}
- **Financeiro:** {', '.join(self.padroes_extraidos['vocabulario']['termos_tecnicos']['financeiro'])}

## ELEMENTOS DE ENGAJAMENTO
- Dados num√©ricos espec√≠ficos (3,2%, 61 empresas)
- Empresas conhecidas como exemplos (Tesla, MicroStrategy)
- Contrapontos equilibrados (benef√≠cios vs. riscos)
- Linguagem acess√≠vel mas com profundidade t√©cnica
"""
        
        with open("ml_training/padroes_aprendidos/resumo_padroes.md", 'w', encoding='utf-8') as f:
            f.write(resumo)
        
        print("üìã Resumo criado: ml_training/padroes_aprendidos/resumo_padroes.md")


if __name__ == "__main__":
    print("ü§ñ SISTEMA DE APRENDIZADO DE ROTEIROS")
    print("Analisando o roteiro atual para extrair padr√µes...")
    print()
    
    analisador = AnalisadorRoteiros()
    padroes = analisador.analisar_roteiro_atual()
    
    print("\n‚úÖ AN√ÅLISE CONCLU√çDA!")
    print("Os padr√µes foram extra√≠dos e salvos para treinar a IA.")
    print("Pr√≥ximo passo: Implementar gerador autom√°tico de roteiros.")