#!/usr/bin/env python3
"""
Gerador autom√°tico de roteiros baseado em padr√µes aprendidos
"""

import json
import random
import re
from typing import Dict, List, Optional
from datetime import datetime

class GeradorRoteiro:
    """Gera roteiros automaticamente seguindo os padr√µes aprendidos"""
    
    def __init__(self):
        self.padroes = self._carregar_padroes()
        self.templates_estrutura = self._criar_templates()
    
    def _carregar_padroes(self) -> Dict:
        """Carrega padr√µes aprendidos"""
        try:
            with open("ml_training/padroes_aprendidos/padroes_roteiro_v1.json", 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print("‚ùå Padr√µes n√£o encontrados! Execute analisador_roteiros.py primeiro")
            return {}
    
    def _criar_templates(self) -> Dict:
        """Cria templates baseados nos padr√µes"""
        
        return {
            "intro": {
                "templates": [
                    "E a√≠ cambada! J√° t√¥ de volta por aqui e bora pras not√≠cias.",
                    "E a√≠ cambada! Mais um dia, mais not√≠cias do cripto. Bora l√°!",
                    "Fala cambada! T√¥ aqui de novo e vamos √†s not√≠cias que t√£o movimentando."
                ],
                "elementos": ["saudacao_energica", "promessa_conteudo", "call_to_action"]
            },
            
            "noticia_estrutura": {
                "template_base": [
                    "titulo_impactante",
                    "transicao_contextual", 
                    "fonte_dados_especificos",
                    "exemplos_concretos",
                    "implicacoes_praticas",
                    "conclusao_critica"
                ],
                "conectores_inicio": [
                    "Seguinte:",
                    "Agora uma que pouca gente t√° falando:",
                    "Presta aten√ß√£o nessa aqui:",
                    "Olha s√≥ isso:"
                ],
                "conectores_fonte": [
                    "segundo",
                    "de acordo com",
                    "conforme dados de",
                    "segundo relat√≥rio do/da"
                ],
                "conectores_implicacao": [
                    "Na pr√°tica, isso significa",
                    "Em outras palavras",
                    "O que isso quer dizer?",
                    "Traduzindo:"
                ],
                "conclusoes_criticas": [
                    "Ent√£o assim:",
                    "Mas a gente tem que",
                    "Por outro lado,",
                    "Isso levanta uma quest√£o importante:"
                ]
            },
            
            "encerramento": {
                "templates": [
                    "Por hoje √© isso, cambada. Em breve t√¥ de volta, e sigo de olho.",
                    "√â isso a√≠ por hoje, cambada. Continuo acompanhando e j√° volto com mais.",
                    "Por hoje fica por aqui, cambada. Em breve t√¥ de volta com mais novidades."
                ],
                "elementos": ["fechamento_caracteristico", "promessa_retorno", "vigilancia_continuada"]
            }
        }
    
    def gerar_roteiro_automatico(self, noticias_input: List[Dict]) -> Dict:
        """
        Gera roteiro completo baseado em not√≠cias fornecidas
        
        Args:
            noticias_input: Lista de dicts com keys: titulo, conteudo, fonte, categoria
        """
        
        print("ü§ñ GERANDO ROTEIRO AUTOM√ÅTICO")
        print("=" * 40)
        
        if not noticias_input:
            print("‚ùå Nenhuma not√≠cia fornecida!")
            return {}
        
        # Gerar cada segmento
        roteiro = {}
        
        # 1. Intro
        roteiro["intro"] = self._gerar_intro()
        
        # 2. Not√≠cias (m√°ximo 3)
        noticias_selecionadas = noticias_input[:3]
        for i, noticia in enumerate(noticias_selecionadas, 1):
            roteiro[f"noticia{i}"] = self._gerar_segmento_noticia(noticia, i)
        
        # 3. Encerramento
        roteiro["encerramento"] = self._gerar_encerramento()
        
        # Salvar roteiro gerado
        self._salvar_roteiro_gerado(roteiro)
        
        return roteiro
    
    def _gerar_intro(self) -> Dict:
        """Gera introdu√ß√£o seguindo padr√µes"""
        
        template = random.choice(self.templates_estrutura["intro"]["templates"])
        
        return {
            "id": "intro",
            "title": "Abertura",
            "text": template,
            "gerado_automaticamente": True,
            "timestamp": datetime.now().isoformat()
        }
    
    def _gerar_segmento_noticia(self, noticia: Dict, numero: int) -> Dict:
        """Gera segmento de not√≠cia seguindo padr√µes aprendidos"""
        
        # Componentes baseados nos padr√µes
        titulo = noticia.get("titulo", "Not√≠cia importante")
        conteudo = noticia.get("conteudo", "")
        fonte = noticia.get("fonte", "fontes do mercado")
        categoria = noticia.get("categoria", "geral")
        
        # Escolher conector de in√≠cio baseado no n√∫mero da not√≠cia
        if numero == 1:
            conector_inicio = "Seguinte:"
        else:
            conector_inicio = random.choice(self.templates_estrutura["noticia_estrutura"]["conectores_inicio"])
        
        # Montar texto seguindo estrutura aprendida
        texto_segmentos = []
        
        # 1. T√≠tulo impactante (adaptado)
        titulo_adaptado = self._adaptar_titulo(titulo)
        texto_segmentos.append(titulo_adaptado)
        
        # 2. Transi√ß√£o contextual
        texto_segmentos.append(f"\n{conector_inicio}")
        
        # 3. Conte√∫do com fonte
        conector_fonte = random.choice(self.templates_estrutura["noticia_estrutura"]["conectores_fonte"])
        if fonte:
            conteudo_com_fonte = f"{conector_fonte} {fonte}, {conteudo}"
        else:
            conteudo_com_fonte = conteudo
        
        texto_segmentos.append(conteudo_com_fonte)
        
        # 4. Implica√ß√£o pr√°tica (usando padr√µes)
        conector_implicacao = random.choice(self.templates_estrutura["noticia_estrutura"]["conectores_implicacao"])
        implicacao = self._gerar_implicacao_categoria(categoria)
        
        if implicacao:
            texto_segmentos.append(f"\n{conector_implicacao} {implicacao}")
        
        # 5. Conclus√£o cr√≠tica (seguindo estilo)
        conclusao = self._gerar_conclusao_critica(categoria)
        if conclusao:
            conector_conclusao = random.choice(self.templates_estrutura["noticia_estrutura"]["conclusoes_criticas"])
            texto_segmentos.append(f"\n{conector_conclusao} {conclusao}")
        
        texto_final = "".join(texto_segmentos)
        
        return {
            "id": f"noticia{numero}",
            "title": titulo,
            "text": texto_final,
            "categoria": categoria,
            "fonte": fonte,
            "gerado_automaticamente": True,
            "timestamp": datetime.now().isoformat()
        }
    
    def _adaptar_titulo(self, titulo_original: str) -> str:
        """Adapta t√≠tulo para o estilo do canal"""
        
        # Remover pontua√ß√£o excessiva, manter direto
        titulo_limpo = re.sub(r'[!?]{2,}', '.', titulo_original)
        titulo_limpo = titulo_limpo.rstrip('.')
        
        # Adicionar ponto final se n√£o tiver
        if not titulo_limpo.endswith(('.', '!', '?')):
            titulo_limpo += '.'
        
        return titulo_limpo
    
    def _gerar_implicacao_categoria(self, categoria: str) -> str:
        """Gera implica√ß√£o pr√°tica baseada na categoria"""
        
        implicacoes_por_categoria = {
            "bitcoin": [
                "isso mostra que o Bitcoin t√° consolidando como reserva de valor institucional",
                "cada vez mais empresas veem BTC como prote√ß√£o contra infla√ß√£o",
                "o mercado institucional t√° validando Bitcoin como ativo s√©rio"
            ],
            "blockchain": [
                "isso pode revolucionar a transpar√™ncia de processos burocr√°ticos",
                "blockchain resolve problemas reais de confian√ßa e rastreabilidade",
                "√© um uso pr√°tico da tecnologia al√©m do mercado cripto"
            ],
            "regulamentacao": [
                "isso define como o mercado cripto vai funcionar no Brasil",
                "regulamenta√ß√£o clara traz mais seguran√ßa pros investidores",
                "√© o primeiro passo pra ado√ß√£o mainstream"
            ],
            "cbdc": [
                "moedas digitais de bancos centrais s√£o o futuro dos pagamentos",
                "isso pode incluir milh√µes de pessoas no sistema financeiro digital",
                "mas tamb√©m levanta quest√µes sobre privacidade e controle"
            ],
            "geral": [
                "isso impacta diretamente quem investe em cripto",
                "s√£o mudan√ßas que v√£o afetar o mercado como um todo",
                "√© uma tend√™ncia que t√° ganhando for√ßa globalmente"
            ]
        }
        
        categoria_lower = categoria.lower()
        opcoes = implicacoes_por_categoria.get(categoria_lower, implicacoes_por_categoria["geral"])
        
        return random.choice(opcoes)
    
    def _gerar_conclusao_critica(self, categoria: str) -> str:
        """Gera conclus√£o cr√≠tica/equilibrada baseada na categoria"""
        
        conclusoes_por_categoria = {
            "bitcoin": [
                "ado√ß√£o institucional √© boa, mas concentra√ß√£o tamb√©m preocupa.",
                "mais legitimidade pro Bitcoin, mas ser√° que n√£o t√° ficando muito centralizado?",
                "√© evolu√ß√£o natural, mas a gente tem que acompanhar se isso n√£o muda a ess√™ncia descentralizada."
            ],
            "regulamentacao": [
                "regulamenta√ß√£o √© necess√°ria, mas n√£o pode sufocar a inova√ß√£o.",
                "clareza √© boa, mas a gente tem que garantir que n√£o limite demais.",
                "equil√≠brio entre prote√ß√£o e liberdade √© fundamental."
            ],
            "cbdc": [
                "tecnologia boa? Sim. Mas liberdade financeira precisa estar no centro dessa conversa.",
                "inclus√£o √© importante, mas vigil√¢ncia excessiva √© um risco real.",
                "avan√ßo tecnol√≥gico √© positivo, mas controle governamental pode ser problem√°tico."
            ],
            "geral": [
                "evolu√ß√£o √© natural, mas sempre com olho cr√≠tico nas consequ√™ncias.",
                "novidades s√£o empolgantes, mas prud√™ncia nunca √© demais.",
                "mudan√ßas trazem oportunidades e riscos - importante equilibrar ambos."
            ]
        }
        
        categoria_lower = categoria.lower() 
        opcoes = conclusoes_por_categoria.get(categoria_lower, conclusoes_por_categoria["geral"])
        
        return random.choice(opcoes)
    
    def _gerar_encerramento(self) -> Dict:
        """Gera encerramento seguindo padr√µes"""
        
        template = random.choice(self.templates_estrutura["encerramento"]["templates"])
        
        return {
            "id": "encerramento", 
            "title": "Fechamento",
            "text": template,
            "gerado_automaticamente": True,
            "timestamp": datetime.now().isoformat()
        }
    
    def _salvar_roteiro_gerado(self, roteiro: Dict):
        """Salva roteiro gerado"""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        arquivo = f"ml_training/roteiros_exemplos/roteiro_gerado_{timestamp}.json"
        
        metadata = {
            "gerado_em": datetime.now().isoformat(),
            "versao_ia": "1.0",
            "baseado_em_padroes": "padroes_roteiro_v1.json",
            "total_segmentos": len(roteiro),
            "roteiro": roteiro
        }
        
        with open(arquivo, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ Roteiro salvo: {arquivo}")


def exemplo_uso():
    """Exemplo de como usar o gerador"""
    
    # Exemplo de not√≠cias que voc√™ forneceria
    noticias_exemplo = [
        {
            "titulo": "BlackRock compra mais R$ 500 milh√µes em Bitcoin",
            "conteudo": "O maior gestor de ativos do mundo aumentou sua posi√ß√£o em Bitcoin atrav√©s do ETF IBIT, comprando mais 8.000 BTC na √∫ltima semana.",
            "fonte": "SEC filings",
            "categoria": "bitcoin"
        },
        {
            "titulo": "Banco Central lan√ßa piloto do Drex em 5 cidades",
            "conteudo": "Programa piloto vai testar pagamentos instant√¢neos com moeda digital em S√£o Paulo, Rio, Bras√≠lia, Salvador e Recife.",
            "fonte": "Banco Central",
            "categoria": "cbdc"
        },
        {
            "titulo": "CVM aprova novo marco regulat√≥rio para exchanges",
            "conteudo": "Novas regras exigem segrega√ß√£o de ativos dos clientes e seguro obrigat√≥rio para todas as corretoras de criptomoedas.",
            "fonte": "CVM",
            "categoria": "regulamentacao"
        }
    ]
    
    gerador = GeradorRoteiro()
    roteiro_automatico = gerador.gerar_roteiro_automatico(noticias_exemplo)
    
    print("\nüì∫ ROTEIRO GERADO:")
    print("=" * 30)
    for segmento_id, dados in roteiro_automatico.items():
        print(f"\nüé¨ {dados['title'].upper()}")
        print(f"üìù {dados['text']}")


if __name__ == "__main__":
    print("ü§ñ GERADOR AUTOM√ÅTICO DE ROTEIROS")
    print("Baseado em padr√µes aprendidos do seu estilo")
    print()
    
    exemplo_uso()